"""
--- Parenthetical possibilities ---
Write a function, parenthetical_possibilities, that takes in a string as an argument. The function should return an array containing all of the strings that could be generated by expanding all parentheses of the string into its possibilities.

For example, the possibilities for 'x(mn)yz' are 'xmyz', 'xnyz'.
"""
import unittest


def parenthetical_possibilities(s):
    if not s:
        return ['']

    result = []
    options, remainder = get_options(s)

    for current in options:
        suffix_list = parenthetical_possibilities(remainder)
        for suffix in suffix_list:
            result.append(current + suffix)

    return result


def get_options(s):
    if s[0] == "(":
        end = s.index(")")
        options = s[1:end]
        remainder = s[end + 1:]
        return (options, remainder)
    else:
        return (s[0], s[1:])


class Test(unittest.TestCase):
    def test_00(self):
        assert parenthetical_possibilities('x(mn)yz') == ['xmyz', 'xnyz']

    def test_01(self):
        assert parenthetical_possibilities("(qr)ab(stu)c") == [
            'qabsc', 'qabtc', 'qabuc', 'rabsc', 'rabtc', 'rabuc'
        ]

    def test_02(self):
        assert parenthetical_possibilities("taco") == ['taco']

    def test_03(self):
        assert parenthetical_possibilities("") == ['']

    def test_04(self):
        assert parenthetical_possibilities("(etc)(blvd)(cat)") == [
            'ebc', 'eba', 'ebt', 'elc', 'ela',
            'elt', 'evc', 'eva', 'evt', 'edc',
            'eda', 'edt', 'tbc', 'tba', 'tbt',
            'tlc', 'tla', 'tlt', 'tvc', 'tva',
            'tvt', 'tdc', 'tda', 'tdt', 'cbc',
            'cba', 'cbt', 'clc', 'cla', 'clt',
            'cvc', 'cva', 'cvt', 'cdc', 'cda',
            'cdt'
        ]


if __name__ == "__main__":
    unittest.main()
